#+OPTIONS: toc:nil
#+BEGIN_SRC json :noexport:
{:title "交易軟體中對 GUI 元件的精確需求" :layout :post :tags ["python" "trading" "architecture" "gui"] :toc false}
#+END_SRC
* 　
[[../../img/not-by-ai/tw/written-by-human/svg/Written-By-Human-Not-By-AI-Badge-white.svg]]

在一般網頁應用程式開發中，對於畫面元件的位置要求不會很高

例如一個表格[fn:: 這邊以電影評價網站 IMDB 的 Top 250 電影頁面為例：<br/>https://www.imdb.com/chart/top/?ref_=nv_mv_250]
可以接受被切一半的狀況：

[[../../img/2023-12/gui_needs_1.png]]

<br/>

但是在交易軟體中，他是有豐富的交互需求，就像遊戲一樣

如果他平常點擊某個位置代表的是表格中相對的某一格，就不能因為滾輪沒滾好

不小心點到別的格子，就像是 Excel[fn:: 此處以 Google spreadsheets 為例：<br/>https://docs.google.com/spreadsheets/]
滑滑鼠滾輪一樣，你不可能滾到一半的格子

[[../../img/2023-12/gui_needs_2.png]]

<br/>

換句話說，對於交易軟體而言，UI 的精確位置是非常重要的

使用者的操作都是非常即時與反應性，如同玩遊戲一樣

因此對於交易軟體的前端開發而言，這是與網頁前端完全不一樣的工作

<br/>

以前面第一張圖，電影列表來說，如果每個電影都有交互，你可以對 10 部電影產生 10 個資訊按鈕

使用者只需要不斷往下滑，就能從第 1-7 部電影，滑到第 4-10 部電影

就能看到第 10 部電影右側的資訊按鈕：

[[../../img/2023-12/gui_needs_3.png]]

<br/>

但是在 GUI 前端開發不是這樣，你是要在使用者滑滾輪的時候，把第七行的資訊按鈕

切換成第八行、第九行、第十行的資訊按鈕，因為 GUI 元件位置是精確的，你只是把裡面的東西換掉

[[../../img/2023-12/gui_needs_4.png]]

這導致了在設計上，需要考慮因為滑鼠與鍵盤事件，觸發 GUI 元件有移動效果時

得重新把格子上的內容、觸發事件重新綁定，例如前圖就得根據使用者滑的情況

不斷對 =action1= 到 =action4= 綁定不同的買進價格的操作函數

<br/>

當然也不是所有都得那麼精確，通常大概核心 2-3 成的操作介面大概都得這樣設計

因此這也導致 GUI 前端開發，採用的設計模式會稍微有點不同

<br/>
